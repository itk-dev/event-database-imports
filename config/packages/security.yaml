security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: mail

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        image_resolver:
            pattern: ^/images/cache/resolve
            security: false
        main:
            form_login:
                login_path: app_admin_login
                check_path: app_admin_login
                enable_csrf: true

            logout:
                path: app_admin_logout
                target: app_admin_login

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login, , roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: !php/enum App\Types\UserRoles::ROLE_USER->value }
        # - { path: ^/profile, roles: ROLE_USER }

    access_decision_manager:
        strategy: unanimous

    role_hierarchy:
        !php/enum App\Types\UserRoles::ROLE_ADMIN->value:       !php/enum App\Types\UserRoles::ROLE_EDITOR->value
        !php/enum App\Types\UserRoles::ROLE_EDITOR->value:       !php/enum App\Types\UserRoles::ROLE_ORGANIZATION_ADMIN->value
        !php/enum App\Types\UserRoles::ROLE_ORGANIZATION_ADMIN->value:    !php/enum App\Types\UserRoles::ROLE_ORGANIZATION_EDITOR->value
        !php/enum App\Types\UserRoles::ROLE_ORGANIZATION_EDITOR->value:    !php/enum App\Types\UserRoles::ROLE_API_USER->value
        !php/enum App\Types\UserRoles::ROLE_API_USER->value:    !php/enum App\Types\UserRoles::ROLE_USER->value

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
